// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: groupQuery.sql

package crud

import (
	"context"
	"database/sql"
	"time"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO group_ (
  title, creator, description_, created_at
) VALUES (
  ?, ?, ?, ?
)
RETURNING id, title, creator, description_, created_at
`

type CreateGroupParams struct {
	Title       string
	Creator     int64
	Description sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRowContext(ctx, createGroup,
		arg.Title,
		arg.Creator,
		arg.Description,
		arg.CreatedAt,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Creator,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGroup = `-- name: DeleteGroup :exec
DELETE FROM group_
WHERE id = ?
`

func (q *Queries) DeleteGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroup, id)
	return err
}

const getGroup = `-- name: GetGroup :one
SELECT id, title, creator, description_, created_at FROM group_
WHERE id = ? LIMIT 1
`

func (q *Queries) GetGroup(ctx context.Context, id int64) (Group, error) {
	row := q.db.QueryRowContext(ctx, getGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Creator,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
