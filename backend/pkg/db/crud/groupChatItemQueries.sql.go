// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: groupChatItemQueries.sql

package crud

import (
	"context"
	"time"
)

const createGroupChatItem = `-- name: CreateGroupChatItem :one
INSERT INTO group_chat_item (
  group_id, source_id, target_id, last_msg_at, chat_noti
) VALUES (
  ?, ?, ?, ?, ?
)
RETURNING id, group_id, source_id, target_id, chat_noti, last_msg_at
`

type CreateGroupChatItemParams struct {
	GroupID   int64
	SourceID  int64
	TargetID  int64
	LastMsgAt time.Time
	ChatNoti  int64
}

func (q *Queries) CreateGroupChatItem(ctx context.Context, arg CreateGroupChatItemParams) (GroupChatItem, error) {
	row := q.db.QueryRowContext(ctx, createGroupChatItem,
		arg.GroupID,
		arg.SourceID,
		arg.TargetID,
		arg.LastMsgAt,
		arg.ChatNoti,
	)
	var i GroupChatItem
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.SourceID,
		&i.TargetID,
		&i.ChatNoti,
		&i.LastMsgAt,
	)
	return i, err
}

const deleteGroupChatItem = `-- name: DeleteGroupChatItem :exec
DELETE FROM group_chat_item
WHERE group_id = ?
`

func (q *Queries) DeleteGroupChatItem(ctx context.Context, groupID int64) error {
	_, err := q.db.ExecContext(ctx, deleteGroupChatItem, groupID)
	return err
}

const deleteOneGroupChatItem = `-- name: DeleteOneGroupChatItem :exec
DELETE FROM group_chat_item
WHERE group_id = ? AND source_id = ? AND target_id = ?
`

type DeleteOneGroupChatItemParams struct {
	GroupID  int64
	SourceID int64
	TargetID int64
}

func (q *Queries) DeleteOneGroupChatItem(ctx context.Context, arg DeleteOneGroupChatItemParams) error {
	_, err := q.db.ExecContext(ctx, deleteOneGroupChatItem, arg.GroupID, arg.SourceID, arg.TargetID)
	return err
}

const getGroupChatNoti = `-- name: GetGroupChatNoti :many
SELECT id, group_id, source_id, target_id, chat_noti, last_msg_at FROM group_chat_item
ORDER BY last_msg_at DESC
`

func (q *Queries) GetGroupChatNoti(ctx context.Context) ([]GroupChatItem, error) {
	rows, err := q.db.QueryContext(ctx, getGroupChatNoti)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GroupChatItem
	for rows.Next() {
		var i GroupChatItem
		if err := rows.Scan(
			&i.ID,
			&i.GroupID,
			&i.SourceID,
			&i.TargetID,
			&i.ChatNoti,
			&i.LastMsgAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOneGroupChatItemBySourceId = `-- name: GetOneGroupChatItemBySourceId :one
SELECT id, group_id, source_id, target_id, chat_noti, last_msg_at FROM group_chat_item
WHERE group_id = ? AND source_id = ?
`

type GetOneGroupChatItemBySourceIdParams struct {
	GroupID  int64
	SourceID int64
}

func (q *Queries) GetOneGroupChatItemBySourceId(ctx context.Context, arg GetOneGroupChatItemBySourceIdParams) (GroupChatItem, error) {
	row := q.db.QueryRowContext(ctx, getOneGroupChatItemBySourceId, arg.GroupID, arg.SourceID)
	var i GroupChatItem
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.SourceID,
		&i.TargetID,
		&i.ChatNoti,
		&i.LastMsgAt,
	)
	return i, err
}

const getOneGroupChatItemByTargetId = `-- name: GetOneGroupChatItemByTargetId :one
SELECT id, group_id, source_id, target_id, chat_noti, last_msg_at FROM group_chat_item
WHERE group_id = ? AND target_id = ?
`

type GetOneGroupChatItemByTargetIdParams struct {
	GroupID  int64
	TargetID int64
}

func (q *Queries) GetOneGroupChatItemByTargetId(ctx context.Context, arg GetOneGroupChatItemByTargetIdParams) (GroupChatItem, error) {
	row := q.db.QueryRowContext(ctx, getOneGroupChatItemByTargetId, arg.GroupID, arg.TargetID)
	var i GroupChatItem
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.SourceID,
		&i.TargetID,
		&i.ChatNoti,
		&i.LastMsgAt,
	)
	return i, err
}

const updateGroupChatItem = `-- name: UpdateGroupChatItem :one
UPDATE group_chat_item
SET chat_noti = ?,
last_msg_at = ?
WHERE group_id = ? AND source_id = ? AND target_id = ?
RETURNING id, group_id, source_id, target_id, chat_noti, last_msg_at
`

type UpdateGroupChatItemParams struct {
	ChatNoti  int64
	LastMsgAt time.Time
	GroupID   int64
	SourceID  int64
	TargetID  int64
}

func (q *Queries) UpdateGroupChatItem(ctx context.Context, arg UpdateGroupChatItemParams) (GroupChatItem, error) {
	row := q.db.QueryRowContext(ctx, updateGroupChatItem,
		arg.ChatNoti,
		arg.LastMsgAt,
		arg.GroupID,
		arg.SourceID,
		arg.TargetID,
	)
	var i GroupChatItem
	err := row.Scan(
		&i.ID,
		&i.GroupID,
		&i.SourceID,
		&i.TargetID,
		&i.ChatNoti,
		&i.LastMsgAt,
	)
	return i, err
}
